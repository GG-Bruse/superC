/*
给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。
*/

//不可处理过长数据
//#include<iostream>
//#include<vector>
//#include<cmath>
//using namespace std;
//class Solution
//{
//public:
//    vector<int> plusOne(vector<int>& digits)
//    {
//        int size = digits.size();
//        unsigned long long ret = 0;
//        bool flag = false;
//        for (int i = 0; i < size; ++i)
//        {
//            unsigned long long temp = pow(10, size - i - 1);
//            ret += digits[i] * temp;
//        }
//        ++ret;
//        for (int i = 0; i < size; ++i)
//        {
//            if (digits[i] != 9)
//            {
//                flag = true;
//            }
//        }
//        if (flag)
//        {
//            for (int i = 0; i < size; ++i)
//            {
//                digits[i] = ret / pow(10, size - i - 1);
//                unsigned long long temp = pow(10, size - i - 1);
//                ret = ret % temp;
//            }
//        }
//        else
//        {
//            for (int i = 0; i < size; ++i)
//            {
//                digits[i] = ret / pow(10, size - i);
//                unsigned long long temp = (int)pow(10, size - i - 1);
//                ret = ret % temp;
//            }
//            digits.push_back(ret);
//        }
//        return digits;
//    }
//};
//int main()
//{
//    vector<int>v;
//    v.push_back(6);
//    v.push_back(1);
//    v.push_back(4);
//    v.push_back(5);
//    v.push_back(3);
//    v.push_back(9);
//    v.push_back(0);
//    v.push_back(1);
//    v.push_back(9);
//    v.push_back(5);
//    v.push_back(1);
//    v.push_back(8);
//    v.push_back(6);
//    v.push_back(7);
//    v.push_back(0);
//    v.push_back(5);
//    v.push_back(5);
//    v.push_back(4);
//    v.push_back(3);
//    Solution s;
//    s.plusOne(v);
//    for (vector<int>::iterator it = v.begin(); it != v.end(); ++it)
//    {
//        cout << *it << endl;
//    }
//	return 0;
//}







/*
当我们对数组digits 加一时，我们只需要关注digits 的末尾出现了多少个 9即可。我们可以考虑如下的三种情况：

如果digits 的末尾没有9，例如 [1,2,3]，那么我们直接将末尾的数加一，得到 [1,2,4] 并返回；

如果 digits 的末尾有若干个 9，例如 [1,2,3,9,9]，那么我们只需要找出从末尾开始的第一个不为9 的元素，
即 3，将该元素加一，得到 [1,2,4,9,9]。随后将末尾的9 全部置零，得到 [1,2,4,0,0] 并返回。

如果 digits 的所有元素都是 99，例如[9,9,9,9,9]，那么答案为 [1,0,0,0,0,0]。
我们只需要构造一个长度比 digits 多 11 的新数组，将首元素置为 1，其余元素置为 0 即可。
*/
//#include<iostream>
//#include<vector>
//using namespace std;
//class Solution
//{
//public:
//    vector<int> plusOne(vector<int>& digits)
//    {
//        int size = digits.size();
//        for (int i = size - 1; i >= 0; --i)
//        {
//            if (digits[i] != 9)
//            {
//                ++digits[i];
//                for (int j = i + 1; j < size; ++j)
//                {
//                    digits[j] = 0;
//                }
//                return digits;
//            }
//        }
//        vector<int> ans(size + 1);
//        ans[0] = 1;
//        return ans;
//    }
//};