/*
给定一个二进制数组nums.计算其中最大连续1的个数。
nums[i] 不是 0 就是 1
*/

//#include<iostream>
//#include<vector>
//using namespace std;
//class Solution
//{
//public:
//	int findMaxConsecutiveOnes(vector<int>& nums)
//	{
//		int count = 0, Max = 0;
//		for (vector<int>::iterator it = nums.begin(); it != nums.end(); ++it)
//		{
//			if (*it == 1)
//			{
//				++count;
//			}
//			else
//			{
//				count = 0;
//			}
//			if (Max < count)
//			{
//				Max = count;
//			}
//		}
//		return Max;
//	}
//};
//int main()
//{
//	vector<int>v;
//	v.push_back(1);
//	v.push_back(1);
//	v.push_back(0);
//	v.push_back(1);
//	v.push_back(1);
//	v.push_back(1);
//	Solution s;
//	cout<<s.findMaxConsecutiveOnes(v);
//	return 0;
//}














/*
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
*/

//位运算
//#include<iostream>
//using namespace std;
//class Solution
//{
//public:
//    int hammingWeight(uint32_t n)
//    {
//        int ret = 0;
//        for (int i = 0; i < 32; ++i)
//        {
//            if (n & (1 << i))
//            {
//                ++ret;
//            }
//        }
//        return ret;
//    }
//};
//int main()
//{
//    Solution s;
//    cout<<s.hammingWeight(1);
//	return 0;
//}


//位运算优化
/*
观察这个运算：n & (n−1)，其运算结果恰为把n的二进制位中的最低位的1变为0之后的结果。
如：6 & (6−1)=4 , 6=(110)_2 , 4=(100)_2​，运算结果4即为把6的二进制位中的最低位的1变为0之后的结果。

这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，
我们不断让当前的n与n−1做与运算，直到 n 变为 0 即可。因为每次运算会使得 n 的最低位的 1 被翻转，因此运算次数就等于 n 的二进制位中 1 的个数。
*/
//#include<iostream>
//using namespace std;
//class Solution
//{
//public:
//    int hammingWeight(uint32_t n)
//    {
//        int ret = 0;
//        while (n)
//        {
//            n &= n - 1;
//            ++ret;
//        }
//        return ret;
//    }
//};
//int main()
//{
//    Solution s;
//    cout << s.hammingWeight(1);
//    return 0;
//}















/*
给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 n/2 的元素。

你可以假设数组是非空的，并且给定的数组总是存在多数元素。
*/

//#include<iostream>
//#include<vector>
//#include<algorithm>
//using namespace std;
//class Solution
//{
//public:
//    int majorityElement(vector<int>& nums)
//    {
//        sort(nums.begin(),nums.end());
//        return nums[nums.size() / 2];
//    }
//};
//int main()
//{
//    vector<int>v;
//    v.push_back(3);
//    v.push_back(2);
//    v.push_back(3);
//    Solution s;
//    cout<<s.majorityElement(v);
//	return 0;
//}


//随机化(图一乐)
/*
我们随机挑选一个下标，检查它是否是众数，如果是就返回，否则继续随机挑选。
*/
//#include<iostream>
//#include<vector>
//using namespace std;
//class Solution
//{
//public:
//    int majorityElement(vector<int>& nums)
//    {
//        while (1)
//        {
//            int ret = nums[rand() % nums.size()];
//            int count = 0;
//            for (vector<int>::iterator it = nums.begin(); it != nums.end(); ++it)
//            {
//                if (ret == *it)
//                {
//                    ++count;
//                }
//            }
//            if (count > nums.size() / 2)
//            {
//                return ret;
//            }
//        }
//        return -1;
//    }
//};
//int main()
//{
//    srand((unsigned int)time(NULL));
//    vector<int>v;
//    v.push_back(3);
//    v.push_back(2);
//    v.push_back(3);
//    Solution s;
//    cout << s.majorityElement(v);
//    return 0;
//}