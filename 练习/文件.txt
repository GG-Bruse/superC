

                                                             //文件
                                                             
//文件分为:程序文件、数据文件
/*
程序文件:
包括源程序文件(后缀为.c) 目标文件(windows环境后缀为.obj) 可执行文件(windows环境后缀为,exe)等
数据文件:
文件的内容不一定是程序，而是程序运行时读写的数据。
*/


//文件名
/*
文件名包含三部分:文件路径+文件主干+文件后缀
*/


//文件类型
/*
文本文件(可以直接看懂):以ASCII字符形式存储的文件就为文本文件
二进制文件:数据在内存中以二进制存储，若不加转换的输出到外存，就为二进制文件
*/


//文件指针
/*
FILE* pf;//文件指针变量
定义pf是一个指向FILE类型数据的指针变量，可以使pf指向某个文件的文件信息区(一个结构体变量)。
通过文件指针变量能够找到与它关联的文件
*/









                                                      //文件的打开与关闭

//fopen(打开)
//文件指针名=fopen(文件名，使用文件方式)

//fclose(关闭)
//fclose(文件指针)

/*
文件的打开方式                
"r"                 只读打开一个文本文件
"w"                 只写打开或建立一个一个文本文件
"a"                 追加打开一个文本文件，并在文件末尾写数据
"rb"                只读打开一个二进制文件，只允许读数据
"wb"                只写打开或建立一个二进制文件，只允许写数据
"ab"                追加打开一个二进制文件，并在文件末尾写数据
"r+"                读写打开一个文本文件
"w+"                读写打开或建立一个文本文件
"a+"                读写打开一个文本文件，允许读或者在文件末尾追加数据
"rb+"               读写打开一个二进制文件
"wb+"               读写打开或建立一个二进制文件
"ab+"               读写打开一个二进制文件，允许读或者在文件末尾追加数据
*/

/*
注意事项:
1.凡是以"r"打开的文件，该文件必须已经存在
2.用"w"打开的文件。若打开的文件不存在，则以指定的文件名建立该文件。若打开的文件已经存在，则将该文件删去，重建一个新文件
*/










                                                     //文件的顺序读写
//读写字符函数

//fputc函数
//fputc('字符'，文件指针)
/*
1.每写入一个字符，文件内部位置指针向后移动一个字节
2.fputc函数有一个返回值。若写入成功则返回写入的字节，否则返回EOF。
*/

//fgetc函数
//字符变量=fgetc(文件指针)
/*
功能:从打开的文件中读取一个字符并将其ASCII码值送入字符变量中
使用该函数后文件内部位置指针向后移动一个字节
*/

/*
注意:
文件指针和文件内部位置指针不相同。
文件指针是指向整个文件的，需在程序中定义说明，只要不重新赋值，文件指针的值不变。
文件内部位置指针用以指示文件内部的当前读写位置，每读写一次，该指针均向后移动，它不需要再程序中定义。
*/








//读写字符串函数

//fgets函数
//fgets(数据位置，size_t n,文件指针)
/*
函数功能:
从文件指针指向的文件读取n-1个字符并把它们放至指定的字符数组中。
若在读取n-1个字符完成前遇到'\n'(也会被读取)或文件结束符EOF则读取结束。
在读取的字符串之后自动加上'\0'
*/

//fputs函数
//fputs(字符串，文件指针)
//字符串包括字符串常量、字符数组名、字符指针变量
/*
功能:
将字符串输出到文件指针指向的文件。
但字符串的结束符'\0'不输出。若成功返回0，否则返回非0。 
*/








//格式化读写函数

//fscanf函数
//fscanf(文件指针，格式化字符串，输入列表) 
/*
如:fscanf(fp,"%d%d",&a,&b)//从fp指向的文件中读出两个整数赋值给a,b
功能:
从fp指向的ASCII文件中读取数据，按格式控制符的含义存入对应的输入列表的变量中，返回值为输入数据的个数。
*/


//fprintf函数
//fprintf(文件指针,格式字符串,输出列表)
/*
fprintf(fp,"%f%f",x,y);//将x,y的值写入fp指向的文件
功能:
将输出列表中的数据，按指定格式控制字符的说明，写入fp指向的ASCII文件，返回值为写入文件的数据的实际个数
*/








//数据块读写函数(二进制)

//fread函数
//size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );
/*
ptr表示存放输入数据空间的的首地址(空间大小至少为size*count)
size为要读取的每个元素的大小（以字节为单位）。
count表示读取数据的个数
stream为文件指针
读取成功将返回成功读取的元素总数。
*/


//fwrite函数
//size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );
/*
ptr为指向要写入的元素数组的指针
size为要写入的每个元素的大小（以字节为单位）。
count表示读取数据的个数
stream为文件指针
写入成功将返回成功写入的元素总数。
*/










                                                        //文件的随机读取
                                                        
//fseek函数(用于移动文件内部位置指针)
//int faeek(FILE* stream,long offset,int origin)
/*
offset 偏移量
origin 起始位置:
文件开头    SEEK_SET    0
当前位置    SEEK_CUR    1
文件末尾    SEEK_END    2
*/

//文件中为abcdef
//#include<stdio.h>
//#include<string.h>
//#include<errno.h>
//int main()
//{
//    FILE* pf = fopen("test.txt", "r+");
//    if (pf == NULL)
//    {
//        printf("%s\n", strerror(errno));
//        return 0;
//    }
//    //定位文件内部指针位置
//    fseek(pf, -2, SEEK_END);
//    //读取数据
//    int ch = fgetc(pf);
//    printf("%c\n", ch);//e
//    fclose(pf);
//    pf = NULL;
//    return 0;
//}





//ftell函数
//long int ftell(FILE* stream)
//返回文件内部位置指针相对于起始位置的便宜量

//文件中为abcdef
//#include<stdio.h>
//#include<string.h>
//#include<errno.h>
//int main()
//{
//    FILE* pf = fopen("test.txt", "r+");
//    if (pf == NULL)
//    {
//        printf("%s\n", strerror(errno));
//        return 0;
//    }
//    fseek(pf, -2, SEEK_END);
//    int pos = ftell(pf);
//    printf("%d\n", pos);//4
//    fclose(pf);
//    pf = NULL;
//    return 0;
//}





//rewind函数
//void rewind ( FILE * stream );
/*
使fp所指向文件的内部位置指针重置于文件开头，与文件刚打开时的状态相同
*/










                                                    //文件结束的判定

//feof函数
//feof(FILE* stream)
//若返回值为0，则为文件读取失败。若为1，则为遇到文件尾结束

/*
注意:
在文件读取过程中，不能使用feof函数的返回值直接判断文件是否结束。
而是应用于当文件读取结束时，判断时读取失败结束，还是遇到文件尾结束
*/

//判断文件是否结束:
/*
1.文本文件是否结束，判断返回值是否为EOF或者NULL
例如:  
fgetc判断是否为EOF
fgets判断返回值是否为NULL
2.二进制文件的读取结束判断，判断返回值是否小于实际要读取的个数
*/


//文件中为空(即起始位置有文件结束标志(EOF/-1))
//#include<stdio.h>
//int main()
//{
//    FILE* pf = fopen("test.txt", "r");
//    if (pf == NULL)
//    {
//        return 0;
//    }
//    int ch = fgetc(pf);
//    printf("%d\n", ch);
//    fclose(pf);
//    pf = NULL;
//    return 0;
//}






//ferror函数
//int ferror(FILE* stream)
/*
功能:
检查文件在读写时是否出错。
若返回值为0表示未出错，返回值1为表示出错
*/


