





                                                            //常量
//分为四种:字面常量，const修饰的常变量，#define定义的标识符常量，枚举常量




//字面常量
//#include<stdio.h>
//int main()
//{
//    100;//直接写出的是字面常量
//    return 0;
//}




//const修饰的常量 const—常属性

//可以修改
//#include<stdio.h>
//int main()
//{
//    int num = 4;
//    printf("%d\n", num);
//    num = 8;//修改num变量
//    printf("%d\n", num);
//    return 0;
//}

//不可修改
//#include<stdio.h>
//int main()
//{
//    const int num = 4;//const修饰的常变量—具有的常属性的变量
//    printf("%d\n", num);
//    return 0;
//}


//#include<stdio.h>
//int main()
//{
//    int arr[10] = { 0 };//创建数组
//    //不可运行—使用const后n为常变量，需使用常量
//    //const int n = 10;
//    //int arr[n] = { 0 };
//    return 0;
//}






////define定义的标识符常量

//#include<stdio.h>
//#define MAX 10//此时定义MAX为10
//int main()
//{
//    int arr[MAX] = { 0 };
//    printf("%d\n", MAX);
//    return 0;
//}






//枚举常量  enum
//枚举——可以一一列举

//#include<stdio.h>
//enum Sex
//{
//    male,//枚举常量——不可修改
//    female,
//    secret
//};
//int main()
//{
//    //enum Sex s = male;   用法：可修改但枚举常量不可修改   如:s=female
//    printf("%d\n", male);//0
//    printf("%d\n", female);//1
//    printf("%d\n", secret);//2
//    return 0;
//}































                                                          //局部变量和全局变量
                                                          
//局部变量
/*
局部变量也称为内部变量。局部变量是在函数或复合语句内作定义说明的。
其作用域仅限于函数或复合语句内，离开该函数或复合语句后在使用该变量是非法的。
*/
//如果在一个作用域和其包含的子作用域内出现变量重名，外层变量被屏蔽



//全局变量——静态区
/*
在函数之外定义的变量是外部变量，也称全局变量，它不属于任何一个函数，只属于某一个源文件程序

全局变量的作用域为从定义变量的位置开始到本源文件结束，在此范围内可以被本文件中的所有函数所共用

当全局变量的定义出现在函数定义之前，则函数可以直接使用该变量。若全局变量的定义在函数定义之后，则必须声明该变量才能在函数中使用
*/


//#include<stdio.h>
//int global = 2019;//全局变量—定义在{}(代码块)之外的变量
//int main()
//{
//	int local = 2018;//局部变量—定义在{}(代码块)之内的变量
//	int global = 2020;//局部变量
//	//全局变量和局部变量可以同时存在，当全局变量和局部变量名称相同时(建议不要相同)，局部变量优先
//	printf("%d\n", global);
//	return 0;
//}


////不可运行——在局部范围内定义，不可在范围外使用
//#include<stdio.h>
//int main()
//{
//    {
//        int a = 10;
//    }
//    printf("%d\n", a);
//    return 0;
//}


////可运行——在全局定义
//#include<stdio.h>
//int a = 10;
//int main()
//{
//    printf("%d\n", a);
//    return 0;
//}













                                                           //变量的存储类型
//auto变量
/*
autu变量也称自动变量，属于动态存储方式。函数中定义的内部变量、形参和复合语句中定义的变量都属于自动变量。
当包含它们的函数或复合语句执行结束后，系统会自动释放掉存储它们的空间。
局部变量的默认存储方式为auto，可以省略。
*/








//static变量

//修饰局部变量—延长局部变量的生命周期
//若初始化时，static局部变量未被赋初值，则自动赋值为0或空字符
//使得在函数调用结束后依然存在，在下一次调用时保留上一次的值

//修饰全局变量—限制全局变量的作用域(使在其他源文件中的全局变量不可用，即使在本源文件声明extern)
//让静态的全局变量只能在自己所在的源文件中使用

//修饰函数—若使用static修饰外部函数，则函数只能在自己所在的源文件中使用(即使声明)，即改变了函数的链接属性
//正常函数具有外部链接属性

//#include<stdio.h>
//#include<string.h>
//void test()
//{
//    static int a = 1;//加上static后，a变为一个静态的局部变量
//    a++;
//    printf("a=%d\n", a);
//}
//int main()
//{
//    int i = 0;
//    while (i < 5)
//    {
//        test();
//        i++;
//    }
//    return 0;
//}








//寄存器变量register变量
//只有自动变量和形式参数才可设为register变量
//#include<stdio.h>
//int main()
//{
//    register int a = 10;//因需频繁使用，建议将把变量定义成寄存器变量，使程序运行更加快速
//    printf("%d\n", a);
//    return 0;
//}








//extern声明外部变量

//在一个文件内声明外部变量，扩展它在程序文件中的作用域

//在多文件的程序中声明外部变量，使得不同源文件可以使用同一外部变量


////另创建一个新建项，在新建项中写一个变量或者函数后，只要在原项中声明，代码可以正常运行
//新建项必须与原项的类型一致，二者后缀都为.c或,cpp
//#include<stdio.h>
//int main()
//{
//    extern int g_val;//extern声明外部符号
//    printf("%d\n", g_val);
//    return 0;
//}

//#include<stdio.h>
//#include<string.h>
//extern int Add(int x, int y);//调用外部函数
//int main()
//{
//    int a = 10;
//    int b = 20;
//    int sum;
//
//    sum = Add(a, b);
//
//    printf("sum=%d\n", sum);
//
//    return 0;
//}


