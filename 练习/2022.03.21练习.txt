/*
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。
*/

//#include<iostream>
//#include<vector>
//using namespace std;
//class Solution {
//public:
//    vector<int> twoSum(vector<int>& nums, int target)
//    {
//        for (int i = 0; i < (int)nums.size() - 1; ++i)
//        {
//            for (int j = i + 1; j < (int)nums.size(); ++j)
//            {
//                if (nums[i] + nums[j] == target)
//                {
//                    return { i,j };
//                }
//            }
//        }
//        return { -1,-1 };
//    }
//};
//int main()
//{
//    vector<int>v;
//    v.push_back(3);
//    v.push_back(3);
//    int target = 6;
//    Solution s;
//    vector<int>v2 = s.twoSum(v, target);
//    for (vector<int>::iterator it = v2.begin(); it != v2.end(); ++it)
//    {
//        cout << *it << endl;
//    }
//    return 0;
//}









/*
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
*/

//#include<iostream>
//#include<string>
//#include<stack>
//using namespace std;
//class Solution {
//public:
//    bool isValid(string s)
//    {
//        stack<char>st;
//        string::iterator it = s.begin();
//        while (it!=s.end())
//        {
//            if (!st.empty())
//            {
//                if ((st.top() == '(' && (*it == '}' || *it == ']')) ||
//                    (st.top() == '{' && (*it == ')' || *it == ']')) ||
//                    (st.top() == '[' && (*it == ')' || *it == '}')))
//                {
//                    return false;
//                }
//            }
//            if (*it == '{' || *it == '[' || *it == '(')
//            {
//                st.push(*it);
//            }
//            if (st.empty())
//            {
//                return false;
//            }
//            if ((st.top() == '(' && *it == ')') || (st.top() == '{' && *it == '}') || (st.top() == '[' && *it == ']'))
//            {
//                if (!st.empty())
//                {
//                    st.pop();
//                }
//                else
//                {
//                    return false;
//                }
//            }
//            ++it;
//        }
//        if (st.empty())
//        {
//            return true;
//        }
//        return false;
//    }
//};
//int main()
//{
//    string str = "()";
//    Solution s;
//    cout<<s.isValid(str);
//    return 0;
//}