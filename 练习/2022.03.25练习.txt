/*
实现 strStr() 函数。
给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。

说明：
当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。

对于本题而言，当 needle 是空字符串时我们应当返回 0 。
*/



//方法一:不推荐
//#include<iostream>
//#include<string>
//using namespace std;
//class Solution {
//public:
//    int strStr(string haystack, string needle)
//    {
//        int count = 0;
//        if (needle == "")
//        {
//            return 0;
//        }
//        for (int i = 0; i < haystack.size(); ++i)
//        {
//            if (haystack[i] == needle[count])
//            {
//                ++count;
//            }
//            else
//            {
//                if (count != 0)
//                {
//                    i -= count;
//                }
//                count = 0;
//            }
//            if (count == needle.size())
//            {
//                return i - needle.size() + 1;
//            }
//        }
//        return -1;
//    }
//};
//int main()
//{
//    string haystack = "sississippi";
//    string needle = "ss";
//    Solution s;
//    int ret = s.strStr(haystack, needle);
//    cout << ret << endl;
//	return 0;
//}



//方法二:
/*
我们可以让字符串needle与字符串haystack的所有长度为m的子串均匹配一次。
为了减少不必要的匹配，我们每次匹配失败即立刻停止当前子串的匹配，对下一个子串继续匹配。如果当前子串匹配成功，我们返回当前子串的开始位置即可。
如果所有子串都匹配失败，则返回 -1.
*/
//#include<iostream>
//#include<string>
//using namespace std;
//class Solution {
//public:
//    int strStr(string haystack, string needle) {
//        int n = haystack.size(), m = needle.size();
//        for (int i = 0; i + m <= n; i++)
//        {
//            bool flag = true;
//            for (int j = 0; j < m; j++)
//            {
//                if (haystack[i + j] != needle[j])
//                {
//                    flag = false;
//                    break;
//                }
//            }
//            if (flag) 
//            {
//                return i;
//            }
//        }
//        return -1;
//    }
//};
//int main()
//{
//    string haystack = "mississippi";
//    string needle = "";
//    Solution s;
//    int ret = s.strStr(haystack, needle);
//    cout << ret << endl;
//    return 0;
//}