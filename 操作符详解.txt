                                          //操作符详解

                                                    
                                                    //算数操作符
//加+   减-   乘*   除/   取模(取余)%

//除法 得商：当两个数中任意一个为浮点数才可计算出小数结果
//取模 得余;两个数必须都为整数










                                                 //移位操作符(操作数必须为整数)

//右移操作符(右移1位具有除2的效果)—移动补码
/*
1.算术移位：(默认)
            右边丢弃，左边补原符号位
2.逻辑移位;(较少)
            右边丢弃，左边补0
*/

//左移操作符：左边丢弃，右边补0 (无算术移位与逻辑移位的区分) (左移一位具有乘2的效果)


////移(2进制)位操作符
//#include<stdio.h>
//int main()
//{
//    //<<左移操作符
//    //>>右移操作符
//    int a = 1;
//    //整型1占四个字节—32个bit位
//    //00000000000000000000000000000001—整型1的二进制编码
//    int b=a << 1;
//    //二进制编码向左移动一位，右边补上一位
//    //移动后的编码为00000000000000000000000000000010
//    printf("%d\n", b);//2
//    return 0;
//}










                                                   //位操作符

//(二进制)位操作符——操作数必须为整数

//&按位与
//|按位或
//^按位异或;对应的二进制位相同则为0，对应的二进制位不同则为1
 
 
 
//#include<stdio.h>
//int main()
//{
//    int a = 3;//011
//    int b = 5;//101
//    //0为假，1为真
//    int c = a & b;
//    int d = a | b;
//    int e = a ^ b;
//    printf("%d\n", c);//得二进制为001，再转化为十进制，结果为1
//    printf("%d\n", d);//得111，再转化为十进制，结果为7
//    printf("%d\n", e);//得二进制为110，再转化为十进制，结果为6
//    return 0;
//}












                                                       //赋值操作符
//复合赋值符
/*

1.+=

2.-=

3.*=

4./=

5.%=

6.>>=

7.<<=

8.&=

9.|=

10.^=

*/












                                                        //单目操作符(只有一个操作数)


//!逻辑反操作

//#include<stdio.h>
//int main()
//{
//    int a = 10;
//    int b = 0;
//    printf("%d\n", a);
//    printf("%d\n", !a);//0
//    //0为假，非0为真，逻辑反操作符将真假互调
//    printf("%d\n", !b);//1
//    //将假转化成真时，一般默认真为1
//    return 0;
//}

////一般应用方式
//#include<stdio.h>
//int main()
//{
//    int a;
//    scanf("%d", &a);
//    if (a)
//    {
//        printf("真\n");
//    }
//    if (!a)
//    {
//        printf("假\n");
//    }
//    return 0;
//}








//取地址操作符&
//间接访问操作符(解引用操作符)*

//#include<stdio.h>
//int main()
//{
//    int a = 10;
//    int* p = &a;
//    *p=20;//解引用操作符
//    printf("%d\n", a);
//    return 0;
//}








////sizeof操作符——计算变量(类型)所占内存空间的大小，单位为字节

//#include<stdio.h>
//int main()
//{
//    int a = 10;
//    int arr[10] = { 0 };//十个整型元素的数组
//    int arr1[] = { 1,2,3,4,5,6 };//定义一个有六个元素的数组
//    int sum;
//
//    printf("%d\n", sizeof(a));//4
//    printf("%d\n", sizeof a);//若为变量名去掉括号也成立，若为类型去掉括号无法运行
//    printf("%d\n", sizeof(int));//4
//
//    printf("%d\n", sizeof(arr));//计算数组大小：4*10=40
//    printf("%d\n", sizeof(arr1));//4*6=24
//
//    //计算数组的元素个数
//    //个数=数组总大小/每个元素的大小
//    sum = sizeof(arr) / sizeof(arr[0]);
//    printf("sum=%d\n", sum);//计算出元素个数为10
//    return 0;
//}

//#include<stdio.h>
//int main()
//{
//    int a = 10;
//    char c = 'r';
//    int arr[10] = { 0 };
//    char* p = &c;
//
//    printf("%d\n", sizeof(a));//4
//    printf("%d\n", sizeof(c));//1
//    printf("%d\n", sizeof(arr));//40
//    printf("%d\n", sizeof(p));//4
//
//    //数组类型
//    printf("%d\n", sizeof(int[5]));//20
//    return 0;
//}

////sizeof括号中的计算式是不直接参与运算，不影响后面程序的运行
//#include<stdio.h>
//int main()
//{
//    short s = 0;
//    int a = 10;
//    printf("%d\n", sizeof(s = a + 5));//2
//    printf("%d\n", s);//0
//    return 0;
//}












////任何整数在内存中储存的时候，储存的是二进制的补码
////对于正数来说，原码，反码，补码都相同
////直接按照正负写出的二进制序列为原码
////原码的符号位不变(即最高位不变)，其他为按位取反得到反码
////反码加1得到补码
////最高位表示正负号，0为正，1为负; 将有符号数(即为负数)的二进制序列的最高位数字规定为1











////~操作符：对一个数的按二进制位取反
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//    int a = 0;//a的二进制序列位：00000000000000000000000000000000——补码
//    int b;
//
//    b = ~a;//b的二进制序列位：11111111111111111111111111111111——补码
//           //反码为11111111111111111111111111111110
//           //原码为10000000000000000000000000000001   输出结果即为-1
//    printf("%d\n", b);
//    return 0;
//}











////自增自减运算符
// 后置：先进行其他操作(赋值)，再加上1
//#include<stdio.h>
//int main()
//{
//    int i = 5;
//    printf("%d\n", ++i);//6 5先加上1，再进行其他操作(赋值输出6)
//    printf("%d\n", --i);//5 6先减1，再进行其他操作(赋值输出5)
//    printf("%d\n", i++);//5 先进行其他操作(赋值输出5)，再5加1为6
//    printf("%d\n", i--);//6 先进行其他操作(赋值输出6)，再6减1为5
//    printf("%d\n", -i++);//-5 先识别-5并输出，再将变量i加1为6
//    printf("%d\n", -i--);//-6 先识别-6并输出，再将变量i减1为5
//    printf("%d\n", i);//输出5
//    return 0;
//}

//#include<stdio.h>
//int main()
//{
//    int y = 3, x = 3, z = 1;
//    printf("%d %d\n", (++x, y++), z + 2);//3 3
//    return 0;
//}

////逻辑短路 b-- 不进行运算
//#include<stdio.h>
//int main()
//{
//    int a = -1, b = 4, k;
//    k = (++a < 0) && !(b-- < 0);
//    //     假            真
//    printf("%d,%d,%d\n", k, a, b);//004
//    return 0;
//}








////(类型)强制类型转化操作符
////不建议使用
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//    int a = (int)3.14;
//
//    printf("%d\n", a);//3
//
//    return 0;
//}


















                                                        //关系操作符
/*

1.>

2.>=

3.<

4.<=

5.!=

6.==

*/

















                                                        //逻辑操作符

//逻辑与&&
//逻辑或||

//#include<stdio.h>
//#include<string.h>
//int main()
//{
//    int a = 3;
//    int b = 5;
//    int c = 0;
//    int d = 0;
//
//    //逻辑与
//    int z = a && b;//真与真为真1
//    int x = a && c;//真与假为假0
//    printf("%d\n", z);
//    printf("%d\n", x);
//
//    //逻辑或
//    int y = a || b;//真或真为真1
//    int q = a || c;//真或假为真1
//    int v = c || d;//假或假为假0
//    printf("y=%d\nq=%d\nv=%d\n", y, q, v);
//
//    return 0;
//}

//逻辑短路




















                                                            //条件操作符
                                                            
//条件操作符(三目操作符)
//(esp1?esp2:exp3)若esp1为真，则执行esp2：若esp1为假，则执行esp3.

//#include<stdio.h>
//#include<string.h>
//int main()
//{
//    int a = 10;
//    int b = 20;
//    int max = 0;
//
//    max = (a > b ? a : b);
//    printf("%d\n", max);
//
//    return 0;
//}












                                                            //逗号表达式
                                                            
//exp1,exp2,exp3，……expn
//从左向右依次执行，整个表达式的结果是最后一个表达式的结果

//#include<stdio.h>
//int main()
//{
//    int a = 1;
//    int b = 2;
//    int c = (a > b, a = b + 10, a, b = a + 1);
//    //                  12            13
//    printf("%d\n", c);//13
//    return 0;
//}




















                                                 //下标引用、函数调用和结构成员

//[]下标引用操作符
//操作数：一个数组名+一个索引值

//#include<stdio.h>
//int main()
//{
//    int i;
//    int arr[10] = { 0 };
//    arr[4] = 10;
//    for (i = 0; i < 10; i++)
//    {
//        printf("%d ", arr[i]);
//    }
//    return 0;
//}









//()函数调用操作符
//接收一个或多个操作数：第一个操作数是函数名，剩余的操作数就是传递给函数的参数


//#include<stdio.h>
//int get_max(int a, int b)
//{
//    return (a > b ? a : b);
//}
//int main()
//{
//    int a, b;
//    int max;
//    scanf("%d%d", &a, &b);
//    max=get_max(a,b);//函数调用操作符
//    printf("max=%d\n", max);
//    return 0;
//}









// .和-> 用于访问结构体成员

//#include<stdio.h>
//struct stu//创建一个结构体类型
//{
//    //成员变量
//    char name[20];
//    int age;
//    char id[20];
//};
//int main()
//{
//    //使用struct stu这个类型创建了一个学生对象s1,并初始化
//    struct stu s1 = { "山鸡",18,"20211128" };
//
//    //打印方式1
//    printf("%s\n", s1.name);
//    printf("%d\n", s1.age);
//    printf("%s\n", s1.id);
//
//    printf("\n");
//    //打印方式2
//    struct stu* p = &s1;
//    printf("%s\n", (*p).name);
//    printf("%d\n", (*p).age);
//    printf("%s\n", (*p).id);
//
//    printf("\n");
//    //打印方式3
//    //结构体指针->成员名
//    printf("%s\n", p->name);
//    printf("%d\n", p->age);
//    printf("%s\n", p->id);
//    return 0;
//}


















                                                        //算术转换
                                                        
//如果某个操作数的各个操作数属于不同的类型，那么除非其中一个操作数的类型转换为另一个操作数的类型，否则无法操作
//算术转换要合理，否则存在潜在问题(精度丢失等)
/*
由高到低
long double
double
float
unsigned long int
long int
unsigned int
int
*/









                                                        //优先级和结合性
//表达式如果不能通过操作符的属性确定唯一的计算路径，即该表达式存在问题
