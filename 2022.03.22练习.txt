/*
罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。
*/

/*
解题思路:
1.通常情况下,罗马数字中小的数字在大的数字的右边.若输入的字符串满足该情况,那么可以将每个字符视作一个单独的值,累加每个字符对应的数值即可.
2.若存在小的数字在大的数字的左边的情况,根据规则需要减去小的数字.
对于这种情况,我们也可以将每个字符视作一个单独的值,若一个数字右侧的数字比它大,则将该数字的符号取反。
*/

//#include<iostream>
//#include<string>
//#include<map>
//using namespace std;
//class Solution {
//private:
//    map<char, int> symbolValues = {
//        {'I', 1},
//        {'V', 5},
//        {'X', 10},
//        {'L', 50},
//        {'C', 100},
//        {'D', 500},
//        {'M', 1000},
//    };
//
//public:
//    int romanToInt(string s) {
//        int ret = 0;
//        int size = s.size();
//        for (int i = 0; i < size; ++i) {
//            int value = symbolValues[s[i]];
//            if (i < size-1 && value < symbolValues[s[i + 1]])//最后一位必然取正号
//            {
//                ret -= value;
//            }
//            else
//            {
//                ret += value;
//            }
//        }
//        return ret;
//    }
//};












/*
给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。

由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。

将最终结果插入 nums 的前 k 个位置后返回 k 。

不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
*/

//#include<iostream>
//#include<vector>
//using namespace std;
//
//class Solution {
//public:
//    int removeDuplicates(vector<int>& nums)
//    {
//        int size = nums.size();
//        if (size == 0)return size;
//        int front = 1, back = 1;
//        for (int i = 1; i < size; ++i)
//        {
//            if (nums[front-1] == nums[front])
//            {
//                ++front;
//                continue;
//            }
//            nums[back] = nums[front];
//            ++front;
//            ++back;
//        }
//        return back;
//    }
//};
//int main()
//{
//    vector<int>v;
//    Solution s;
//    v.push_back(0);
//    v.push_back(0);
//    v.push_back(1);
//    v.push_back(1);
//    v.push_back(1);
//    v.push_back(2);
//    v.push_back(2);
//    v.push_back(3);
//    v.push_back(3);
//    s.removeDuplicates(v);
//    for (vector<int>::iterator it = v.begin(); it != v.end(); ++it)
//    {
//        cout << *it << endl;
//    }
//    return 0;
//}