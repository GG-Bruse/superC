/*
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

请必须使用时间复杂度为 O(log n) 的算法。
*/

//循环遍历
//#include<iostream>
//#include<vector>
//using namespace std;
//class Solution
//{
//public:
//	int searchInsert(vector<int>& nums, int target)
//	{
//		for (int i = 0; i < nums.size(); ++i)
//		{
//			if (target <= nums[i])
//			{
//				return i;
//			}
//		}
//		return nums.size();
//	}
//};
//int main()
//{
//	vector<int>v;
//	v.push_back(1);
//	v.push_back(3);
//	v.push_back(5);
//	v.push_back(6);
//	Solution s;
//	cout<<s.searchInsert(v, 5);
//	return 0;
//}



//二分查找
//#include<iostream>
//#include<vector>
//using namespace std;
//class Solution
//{
//public:
//	int searchInsert(vector<int>& nums, int target)
//	{
//		int left = 0, right = nums.size() - 1;
//		while (left <= right)
//		{
//			int mid = (left + right) / 2;
//			if (nums[mid] < target)
//			{
//				left = mid + 1;
//			}
//			else
//			{
//				right = mid - 1;
//			}
//		}
//		return left;
//	}
//};
//int main()
//{
//	vector<int>v;
//	v.push_back(1);
//	v.push_back(3);
//	v.push_back(5);
//	v.push_back(6);
//	Solution s;
//	cout << s.searchInsert(v, 5);
//	return 0;
//}